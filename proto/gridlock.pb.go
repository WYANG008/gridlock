// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gridlock.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	gridlock.proto

It has these top-level messages:
	BankAccount
	MintAccount
	StoredBankAccount
	PaymentMessage
	StoredPaymentMessage
	StoredPaymentQueue
	GrossSettlementSet
	GLRConfiguration
	GridlockProposal
	StoredGridlockProposal
	TallyGridlockProposal
	NetGridlockProposal
	StoredPedersenGroup
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type StatusType int32

const (
	StatusType_ACTIVE  StatusType = 0
	StatusType_SETTLED StatusType = 1
)

var StatusType_name = map[int32]string{
	0: "ACTIVE",
	1: "SETTLED",
}
var StatusType_value = map[string]int32{
	"ACTIVE":  0,
	"SETTLED": 1,
}

func (x StatusType) String() string {
	return proto1.EnumName(StatusType_name, int32(x))
}
func (StatusType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GLRStatusType int32

const (
	GLRStatusType_START   GLRStatusType = 0
	GLRStatusType_SUCCESS GLRStatusType = 1
	GLRStatusType_NETTED  GLRStatusType = 2
)

var GLRStatusType_name = map[int32]string{
	0: "START",
	1: "SUCCESS",
	2: "NETTED",
}
var GLRStatusType_value = map[string]int32{
	"START":   0,
	"SUCCESS": 1,
	"NETTED":  2,
}

func (x GLRStatusType) String() string {
	return proto1.EnumName(GLRStatusType_name, int32(x))
}
func (GLRStatusType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// the zkrp is a zero-knowledge range proof of the current bank acount balance in the cmBalance
type BankAccount struct {
	BankId    int32  `protobuf:"varint,1,opt,name=bankId" json:"bankId,omitempty"`
	CmBalance []byte `protobuf:"bytes,2,opt,name=cmBalance,proto3" json:"cmBalance,omitempty"`
	Zkrp      []byte `protobuf:"bytes,3,opt,name=zkrp,proto3" json:"zkrp,omitempty"`
}

func (m *BankAccount) Reset()                    { *m = BankAccount{} }
func (m *BankAccount) String() string            { return proto1.CompactTextString(m) }
func (*BankAccount) ProtoMessage()               {}
func (*BankAccount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BankAccount) GetBankId() int32 {
	if m != nil {
		return m.BankId
	}
	return 0
}

func (m *BankAccount) GetCmBalance() []byte {
	if m != nil {
		return m.CmBalance
	}
	return nil
}

func (m *BankAccount) GetZkrp() []byte {
	if m != nil {
		return m.Zkrp
	}
	return nil
}

// MintAccount message will initialize bank's accounts
type MintAccount struct {
	Accounts []*BankAccount `protobuf:"bytes,1,rep,name=accounts" json:"accounts,omitempty"`
}

func (m *MintAccount) Reset()                    { *m = MintAccount{} }
func (m *MintAccount) String() string            { return proto1.CompactTextString(m) }
func (*MintAccount) ProtoMessage()               {}
func (*MintAccount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MintAccount) GetAccounts() []*BankAccount {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type StoredBankAccount struct {
	CmBalance []byte `protobuf:"bytes,1,opt,name=cmBalance,proto3" json:"cmBalance,omitempty"`
}

func (m *StoredBankAccount) Reset()                    { *m = StoredBankAccount{} }
func (m *StoredBankAccount) String() string            { return proto1.CompactTextString(m) }
func (*StoredBankAccount) ProtoMessage()               {}
func (*StoredBankAccount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StoredBankAccount) GetCmBalance() []byte {
	if m != nil {
		return m.CmBalance
	}
	return nil
}

// Schema for payment message
// sender and receiver are the ids of two parties involved
// cmAmount is the committment of payment value
// zkrp is a zero knowledge range proof attesting that committed value in cmAmount is within MAX> range >=0
type PaymentMessage struct {
	PaymentId int32  `protobuf:"varint,1,opt,name=paymentId" json:"paymentId,omitempty"`
	Sender    int32  `protobuf:"varint,2,opt,name=sender" json:"sender,omitempty"`
	Receiver  int32  `protobuf:"varint,3,opt,name=receiver" json:"receiver,omitempty"`
	CmAmount  []byte `protobuf:"bytes,4,opt,name=cmAmount,proto3" json:"cmAmount,omitempty"`
	Zkrp      []byte `protobuf:"bytes,5,opt,name=zkrp,proto3" json:"zkrp,omitempty"`
}

func (m *PaymentMessage) Reset()                    { *m = PaymentMessage{} }
func (m *PaymentMessage) String() string            { return proto1.CompactTextString(m) }
func (*PaymentMessage) ProtoMessage()               {}
func (*PaymentMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PaymentMessage) GetPaymentId() int32 {
	if m != nil {
		return m.PaymentId
	}
	return 0
}

func (m *PaymentMessage) GetSender() int32 {
	if m != nil {
		return m.Sender
	}
	return 0
}

func (m *PaymentMessage) GetReceiver() int32 {
	if m != nil {
		return m.Receiver
	}
	return 0
}

func (m *PaymentMessage) GetCmAmount() []byte {
	if m != nil {
		return m.CmAmount
	}
	return nil
}

func (m *PaymentMessage) GetZkrp() []byte {
	if m != nil {
		return m.Zkrp
	}
	return nil
}

// StoredPaymentMessage is stored in PAYMENT_MESSAGE table, indexed by PaymentId
type StoredPaymentMessage struct {
	Sender   int32      `protobuf:"varint,1,opt,name=sender" json:"sender,omitempty"`
	Receiver int32      `protobuf:"varint,2,opt,name=receiver" json:"receiver,omitempty"`
	CmAmount []byte     `protobuf:"bytes,4,opt,name=cmAmount,proto3" json:"cmAmount,omitempty"`
	Zkrp     []byte     `protobuf:"bytes,5,opt,name=zkrp,proto3" json:"zkrp,omitempty"`
	Status   StatusType `protobuf:"varint,6,opt,name=status,enum=proto.StatusType" json:"status,omitempty"`
}

func (m *StoredPaymentMessage) Reset()                    { *m = StoredPaymentMessage{} }
func (m *StoredPaymentMessage) String() string            { return proto1.CompactTextString(m) }
func (*StoredPaymentMessage) ProtoMessage()               {}
func (*StoredPaymentMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StoredPaymentMessage) GetSender() int32 {
	if m != nil {
		return m.Sender
	}
	return 0
}

func (m *StoredPaymentMessage) GetReceiver() int32 {
	if m != nil {
		return m.Receiver
	}
	return 0
}

func (m *StoredPaymentMessage) GetCmAmount() []byte {
	if m != nil {
		return m.CmAmount
	}
	return nil
}

func (m *StoredPaymentMessage) GetZkrp() []byte {
	if m != nil {
		return m.Zkrp
	}
	return nil
}

func (m *StoredPaymentMessage) GetStatus() StatusType {
	if m != nil {
		return m.Status
	}
	return StatusType_ACTIVE
}

// StoredPaymentQueue is stored in PAYMENT_QUEUE_INCOMING/PAYMENT_QUEUE_OUTGOING table
// indexed by bankId, stores the array of message Ids
type StoredPaymentQueue struct {
	PaymentIds []int32 `protobuf:"varint,1,rep,packed,name=paymentIds" json:"paymentIds,omitempty"`
}

func (m *StoredPaymentQueue) Reset()                    { *m = StoredPaymentQueue{} }
func (m *StoredPaymentQueue) String() string            { return proto1.CompactTextString(m) }
func (*StoredPaymentQueue) ProtoMessage()               {}
func (*StoredPaymentQueue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StoredPaymentQueue) GetPaymentIds() []int32 {
	if m != nil {
		return m.PaymentIds
	}
	return nil
}

// grosssettlement set contains the outgoing payments ids of a single bank
// zkrp is tha zero knowledge range proof attesting that the (balance-outgoing) is within MAX>range>=0
type GrossSettlementSet struct {
	BankId    int32  `protobuf:"varint,1,opt,name=bankId" json:"bankId,omitempty"`
	PaymentId int32  `protobuf:"varint,2,opt,name=paymentId" json:"paymentId,omitempty"`
	CmBalance []byte `protobuf:"bytes,3,opt,name=cmBalance,proto3" json:"cmBalance,omitempty"`
	Zkrp      []byte `protobuf:"bytes,4,opt,name=zkrp,proto3" json:"zkrp,omitempty"`
}

func (m *GrossSettlementSet) Reset()                    { *m = GrossSettlementSet{} }
func (m *GrossSettlementSet) String() string            { return proto1.CompactTextString(m) }
func (*GrossSettlementSet) ProtoMessage()               {}
func (*GrossSettlementSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GrossSettlementSet) GetBankId() int32 {
	if m != nil {
		return m.BankId
	}
	return 0
}

func (m *GrossSettlementSet) GetPaymentId() int32 {
	if m != nil {
		return m.PaymentId
	}
	return 0
}

func (m *GrossSettlementSet) GetCmBalance() []byte {
	if m != nil {
		return m.CmBalance
	}
	return nil
}

func (m *GrossSettlementSet) GetZkrp() []byte {
	if m != nil {
		return m.Zkrp
	}
	return nil
}

type GLRConfiguration struct {
	GridlockId int32         `protobuf:"varint,1,opt,name=gridlockId" json:"gridlockId,omitempty"`
	BankIds    []int32       `protobuf:"varint,2,rep,packed,name=bankIds" json:"bankIds,omitempty"`
	Status     GLRStatusType `protobuf:"varint,3,opt,name=status,enum=proto.GLRStatusType" json:"status,omitempty"`
}

func (m *GLRConfiguration) Reset()                    { *m = GLRConfiguration{} }
func (m *GLRConfiguration) String() string            { return proto1.CompactTextString(m) }
func (*GLRConfiguration) ProtoMessage()               {}
func (*GLRConfiguration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GLRConfiguration) GetGridlockId() int32 {
	if m != nil {
		return m.GridlockId
	}
	return 0
}

func (m *GLRConfiguration) GetBankIds() []int32 {
	if m != nil {
		return m.BankIds
	}
	return nil
}

func (m *GLRConfiguration) GetStatus() GLRStatusType {
	if m != nil {
		return m.Status
	}
	return GLRStatusType_START
}

// zkrp1 is cm of (balance - outgoing + incoming) >=0
// zkrp2 is cm of -(balance - outgoing + incoming - firstFrominfeasibleIds) >= 0
type GridlockProposal struct {
	GridlockId    int32   `protobuf:"varint,1,opt,name=gridlockId" json:"gridlockId,omitempty"`
	BankId        int32   `protobuf:"varint,2,opt,name=bankId" json:"bankId,omitempty"`
	OutgoingIds   []int32 `protobuf:"varint,3,rep,packed,name=outgoingIds" json:"outgoingIds,omitempty"`
	InfeasibleIds []int32 `protobuf:"varint,4,rep,packed,name=infeasibleIds" json:"infeasibleIds,omitempty"`
	CmBalance     []byte  `protobuf:"bytes,5,opt,name=cmBalance,proto3" json:"cmBalance,omitempty"`
	Zkrp1         []byte  `protobuf:"bytes,6,opt,name=zkrp1,proto3" json:"zkrp1,omitempty"`
	Zkrp2         []byte  `protobuf:"bytes,7,opt,name=zkrp2,proto3" json:"zkrp2,omitempty"`
}

func (m *GridlockProposal) Reset()                    { *m = GridlockProposal{} }
func (m *GridlockProposal) String() string            { return proto1.CompactTextString(m) }
func (*GridlockProposal) ProtoMessage()               {}
func (*GridlockProposal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GridlockProposal) GetGridlockId() int32 {
	if m != nil {
		return m.GridlockId
	}
	return 0
}

func (m *GridlockProposal) GetBankId() int32 {
	if m != nil {
		return m.BankId
	}
	return 0
}

func (m *GridlockProposal) GetOutgoingIds() []int32 {
	if m != nil {
		return m.OutgoingIds
	}
	return nil
}

func (m *GridlockProposal) GetInfeasibleIds() []int32 {
	if m != nil {
		return m.InfeasibleIds
	}
	return nil
}

func (m *GridlockProposal) GetCmBalance() []byte {
	if m != nil {
		return m.CmBalance
	}
	return nil
}

func (m *GridlockProposal) GetZkrp1() []byte {
	if m != nil {
		return m.Zkrp1
	}
	return nil
}

func (m *GridlockProposal) GetZkrp2() []byte {
	if m != nil {
		return m.Zkrp2
	}
	return nil
}

type StoredGridlockProposal struct {
	OutgoingIds   []int32 `protobuf:"varint,1,rep,packed,name=outgoingIds" json:"outgoingIds,omitempty"`
	InfeasibleIds []int32 `protobuf:"varint,2,rep,packed,name=infeasibleIds" json:"infeasibleIds,omitempty"`
	CmBalance     []byte  `protobuf:"bytes,3,opt,name=cmBalance,proto3" json:"cmBalance,omitempty"`
	Zkrp1         []byte  `protobuf:"bytes,4,opt,name=zkrp1,proto3" json:"zkrp1,omitempty"`
	Zkrp2         []byte  `protobuf:"bytes,5,opt,name=zkrp2,proto3" json:"zkrp2,omitempty"`
}

func (m *StoredGridlockProposal) Reset()                    { *m = StoredGridlockProposal{} }
func (m *StoredGridlockProposal) String() string            { return proto1.CompactTextString(m) }
func (*StoredGridlockProposal) ProtoMessage()               {}
func (*StoredGridlockProposal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *StoredGridlockProposal) GetOutgoingIds() []int32 {
	if m != nil {
		return m.OutgoingIds
	}
	return nil
}

func (m *StoredGridlockProposal) GetInfeasibleIds() []int32 {
	if m != nil {
		return m.InfeasibleIds
	}
	return nil
}

func (m *StoredGridlockProposal) GetCmBalance() []byte {
	if m != nil {
		return m.CmBalance
	}
	return nil
}

func (m *StoredGridlockProposal) GetZkrp1() []byte {
	if m != nil {
		return m.Zkrp1
	}
	return nil
}

func (m *StoredGridlockProposal) GetZkrp2() []byte {
	if m != nil {
		return m.Zkrp2
	}
	return nil
}

type TallyGridlockProposal struct {
	GridlockId int32 `protobuf:"varint,1,opt,name=gridlockId" json:"gridlockId,omitempty"`
}

func (m *TallyGridlockProposal) Reset()                    { *m = TallyGridlockProposal{} }
func (m *TallyGridlockProposal) String() string            { return proto1.CompactTextString(m) }
func (*TallyGridlockProposal) ProtoMessage()               {}
func (*TallyGridlockProposal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *TallyGridlockProposal) GetGridlockId() int32 {
	if m != nil {
		return m.GridlockId
	}
	return 0
}

type NetGridlockProposal struct {
	GridlockId int32 `protobuf:"varint,1,opt,name=gridlockId" json:"gridlockId,omitempty"`
}

func (m *NetGridlockProposal) Reset()                    { *m = NetGridlockProposal{} }
func (m *NetGridlockProposal) String() string            { return proto1.CompactTextString(m) }
func (*NetGridlockProposal) ProtoMessage()               {}
func (*NetGridlockProposal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *NetGridlockProposal) GetGridlockId() int32 {
	if m != nil {
		return m.GridlockId
	}
	return 0
}

// StoredPedersonGroup is the public pederson commitment parameters stored in ledger table PEDERSEN_GROUP
type StoredPedersenGroup struct {
	P []byte `protobuf:"bytes,1,opt,name=p,proto3" json:"p,omitempty"`
	G []byte `protobuf:"bytes,2,opt,name=g,proto3" json:"g,omitempty"`
	Q []byte `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	H []byte `protobuf:"bytes,4,opt,name=h,proto3" json:"h,omitempty"`
}

func (m *StoredPedersenGroup) Reset()                    { *m = StoredPedersenGroup{} }
func (m *StoredPedersenGroup) String() string            { return proto1.CompactTextString(m) }
func (*StoredPedersenGroup) ProtoMessage()               {}
func (*StoredPedersenGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *StoredPedersenGroup) GetP() []byte {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *StoredPedersenGroup) GetG() []byte {
	if m != nil {
		return m.G
	}
	return nil
}

func (m *StoredPedersenGroup) GetQ() []byte {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *StoredPedersenGroup) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

func init() {
	proto1.RegisterType((*BankAccount)(nil), "proto.BankAccount")
	proto1.RegisterType((*MintAccount)(nil), "proto.MintAccount")
	proto1.RegisterType((*StoredBankAccount)(nil), "proto.StoredBankAccount")
	proto1.RegisterType((*PaymentMessage)(nil), "proto.PaymentMessage")
	proto1.RegisterType((*StoredPaymentMessage)(nil), "proto.StoredPaymentMessage")
	proto1.RegisterType((*StoredPaymentQueue)(nil), "proto.StoredPaymentQueue")
	proto1.RegisterType((*GrossSettlementSet)(nil), "proto.GrossSettlementSet")
	proto1.RegisterType((*GLRConfiguration)(nil), "proto.GLRConfiguration")
	proto1.RegisterType((*GridlockProposal)(nil), "proto.GridlockProposal")
	proto1.RegisterType((*StoredGridlockProposal)(nil), "proto.StoredGridlockProposal")
	proto1.RegisterType((*TallyGridlockProposal)(nil), "proto.TallyGridlockProposal")
	proto1.RegisterType((*NetGridlockProposal)(nil), "proto.NetGridlockProposal")
	proto1.RegisterType((*StoredPedersenGroup)(nil), "proto.StoredPedersenGroup")
	proto1.RegisterEnum("proto.StatusType", StatusType_name, StatusType_value)
	proto1.RegisterEnum("proto.GLRStatusType", GLRStatusType_name, GLRStatusType_value)
}

func init() { proto1.RegisterFile("gridlock.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 620 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xdf, 0x4e, 0xdb, 0x30,
	0x14, 0xc6, 0xe7, 0xb4, 0x29, 0x70, 0x0a, 0xa8, 0x18, 0x86, 0xa2, 0x69, 0x9a, 0xaa, 0x68, 0x93,
	0x3a, 0x34, 0x21, 0x51, 0x36, 0xed, 0x6a, 0x17, 0xa5, 0x54, 0x15, 0x12, 0x20, 0x96, 0x64, 0xdb,
	0x75, 0x48, 0x4d, 0x88, 0x9a, 0xc6, 0xc1, 0x76, 0x26, 0x81, 0xf6, 0x14, 0x7b, 0x87, 0xdd, 0xec,
	0x99, 0xf6, 0x30, 0x93, 0x1d, 0x37, 0x7f, 0x3a, 0x3a, 0x86, 0x76, 0xd5, 0x9c, 0x2f, 0x27, 0x3e,
	0xbf, 0xf3, 0x9d, 0x53, 0xc3, 0x66, 0xc8, 0xa2, 0x49, 0x4c, 0x83, 0xe9, 0x7e, 0xca, 0xa8, 0xa0,
	0xd8, 0x54, 0x3f, 0xf6, 0x17, 0x68, 0x1f, 0xf9, 0xc9, 0x74, 0x10, 0x04, 0x34, 0x4b, 0x04, 0xde,
	0x85, 0xd6, 0xa5, 0x9f, 0x4c, 0x4f, 0x26, 0x16, 0xea, 0xa2, 0x9e, 0xe9, 0xe8, 0x08, 0x3f, 0x87,
	0xb5, 0x60, 0x76, 0xe4, 0xc7, 0x7e, 0x12, 0x10, 0xcb, 0xe8, 0xa2, 0xde, 0xba, 0x53, 0x0a, 0x18,
	0x43, 0xf3, 0x6e, 0xca, 0x52, 0xab, 0xa1, 0x5e, 0xa8, 0x67, 0xfb, 0x03, 0xb4, 0xcf, 0xa2, 0x44,
	0xcc, 0x0f, 0xde, 0x87, 0x55, 0x3f, 0x7f, 0xe4, 0x16, 0xea, 0x36, 0x7a, 0xed, 0x3e, 0xce, 0x41,
	0xf6, 0x2b, 0xe5, 0x9d, 0x22, 0xc7, 0x3e, 0x80, 0x2d, 0x57, 0x50, 0x46, 0x26, 0x55, 0xba, 0x1a,
	0x05, 0x5a, 0xa0, 0xb0, 0xbf, 0x23, 0xd8, 0xbc, 0xf0, 0x6f, 0x67, 0x24, 0x11, 0x67, 0x84, 0x73,
	0x3f, 0x24, 0xf2, 0x83, 0x34, 0x57, 0x8a, 0x8e, 0x4a, 0x41, 0x36, 0xcb, 0x49, 0x32, 0x21, 0x4c,
	0x75, 0x64, 0x3a, 0x3a, 0xc2, 0xcf, 0x60, 0x95, 0x91, 0x80, 0x44, 0x5f, 0x09, 0x53, 0x2d, 0x99,
	0x4e, 0x11, 0xcb, 0x77, 0xc1, 0x6c, 0x30, 0x93, 0x38, 0x56, 0x53, 0x11, 0x14, 0x71, 0x61, 0x83,
	0x59, 0xb1, 0xe1, 0x07, 0x82, 0x9d, 0xbc, 0x91, 0x05, 0xb4, 0xb2, 0x38, 0x5a, 0x5a, 0xdc, 0xf8,
	0xbf, 0xe2, 0xf8, 0x35, 0xb4, 0xb8, 0xf0, 0x45, 0xc6, 0xad, 0x56, 0x17, 0xf5, 0x36, 0xfb, 0x5b,
	0xda, 0x72, 0x57, 0x89, 0xde, 0x6d, 0x4a, 0x1c, 0x9d, 0x60, 0xbf, 0x05, 0x5c, 0xc3, 0xfc, 0x98,
	0x91, 0x8c, 0xe0, 0x17, 0x00, 0x85, 0x5d, 0xf9, 0xdc, 0x4c, 0xa7, 0xa2, 0xd8, 0xdf, 0x00, 0x8f,
	0x19, 0xe5, 0xdc, 0x25, 0x42, 0xc4, 0x44, 0xaa, 0x2e, 0xf9, 0xeb, 0x12, 0x95, 0xd3, 0x30, 0x16,
	0xa7, 0x51, 0x1b, 0x6e, 0x63, 0xd9, 0x8a, 0x35, 0x2b, 0xde, 0xde, 0x41, 0x67, 0x7c, 0xea, 0x0c,
	0x69, 0x72, 0x15, 0x85, 0x19, 0xf3, 0x45, 0x44, 0x13, 0x49, 0x3c, 0x5f, 0xf4, 0xa2, 0x7e, 0x45,
	0xc1, 0x16, 0xac, 0xe4, 0x34, 0xdc, 0x32, 0x54, 0x3b, 0xf3, 0x10, 0xbf, 0x29, 0xcc, 0x6a, 0x28,
	0xb3, 0x76, 0xb4, 0x59, 0xe3, 0x53, 0xe7, 0x1e, 0xbf, 0x7e, 0x21, 0xe8, 0x8c, 0xf5, 0xb1, 0x17,
	0x8c, 0xa6, 0x94, 0xfb, 0xf1, 0x83, 0xc5, 0x4b, 0x63, 0x8c, 0x9a, 0x31, 0x5d, 0x68, 0xd3, 0x4c,
	0x84, 0x34, 0x4a, 0x42, 0x09, 0xd6, 0x50, 0x60, 0x55, 0x09, 0xbf, 0x84, 0x8d, 0x28, 0xb9, 0x22,
	0x3e, 0x8f, 0x2e, 0x63, 0x22, 0x73, 0x9a, 0x2a, 0xa7, 0x2e, 0xd6, 0x2d, 0x34, 0x17, 0x2d, 0xdc,
	0x01, 0x53, 0xda, 0x76, 0xa0, 0x96, 0x61, 0xdd, 0xc9, 0x83, 0xb9, 0xda, 0xb7, 0x56, 0x4a, 0xb5,
	0x6f, 0xff, 0x44, 0xb0, 0x9b, 0xef, 0xc3, 0x1f, 0x4d, 0x2e, 0xc0, 0xa2, 0x7f, 0x80, 0x35, 0x1e,
	0x84, 0x6d, 0x2c, 0x85, 0x6d, 0xde, 0x0b, 0x6b, 0x56, 0x61, 0xdf, 0xc3, 0x53, 0xcf, 0x8f, 0xe3,
	0xdb, 0xc7, 0xce, 0xc3, 0x7e, 0x07, 0xdb, 0xe7, 0x44, 0x3c, 0xfa, 0xb3, 0x33, 0xd8, 0xd6, 0xff,
	0x15, 0x32, 0x21, 0x8c, 0x93, 0x64, 0xcc, 0x68, 0x96, 0xe2, 0x75, 0x40, 0xa9, 0xbe, 0x95, 0x90,
	0x8a, 0x42, 0x7d, 0x53, 0xa2, 0x50, 0x46, 0x37, 0xba, 0x49, 0x74, 0x23, 0xa3, 0x6b, 0xdd, 0x18,
	0xba, 0xde, 0x7b, 0x05, 0x50, 0x2e, 0x18, 0x06, 0x68, 0x0d, 0x86, 0xde, 0xc9, 0xe7, 0x51, 0xe7,
	0x09, 0x6e, 0xc3, 0x8a, 0x3b, 0xf2, 0xbc, 0xd3, 0xd1, 0x71, 0x07, 0xed, 0x1d, 0xc2, 0x46, 0x6d,
	0x15, 0xf1, 0x1a, 0x98, 0xae, 0x37, 0x70, 0x3c, 0x9d, 0xf8, 0x69, 0x38, 0x1c, 0xb9, 0x6e, 0x07,
	0xc9, 0x13, 0xce, 0x47, 0x9e, 0x37, 0x3a, 0xee, 0x18, 0x97, 0x2d, 0xb5, 0xc3, 0x87, 0xbf, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xc0, 0x5a, 0x78, 0xdb, 0xfe, 0x05, 0x00, 0x00,
}
